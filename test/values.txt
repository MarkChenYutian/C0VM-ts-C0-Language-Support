# Declare a Variable

int main() {
    int a = 0;
    return 0;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Type(Identifier), Variable(Identifier), Value(Number)
            ),
            Expression(
                Keyword(return), Value(Number)
            )
        )
    )
)

# Function Call as Value

int main() {
    int a = f();
    return 0;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Type(Identifier), Variable(Identifier), Value(
                    Variable(Identifier), CommaSep()
                )
            ),
            Expression(
                Keyword(return), Value(Number)
            )
        )
    )
)

# Array Indexing of value

int main() {
    int a = f();
    return a[0];
}

==> 

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Type(Identifier), Variable(Identifier), Value(Variable(Identifier), CommaSep())
            ),
            Expression(
                Keyword(return), Variable(Identifier, ArrayIndex(Value(Number)))
            )
        )
    )
)

# Dereference

int main() {
    int a = *b;
    return a;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Type(Identifier), Variable(Identifier), Variable(Mul, Identifier)
            ),
            Expression(
                Keyword(return), Variable(Identifier)
            )
        )
    )
)

# Get Struct Field

int main(struct list a) {
    int b = a -> c;
    return b;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(
            Parameter(Type(Keyword(struct), Identifier), Identifier)
        ),
        Scope(
            Expression(
                Type(Identifier), Variable(Identifier), Variable(
                    Identifier, Field, Identifier
                )
            ),
            Expression(
                Keyword(return), Variable(Identifier)
            )
        )
    )
)

# String 

int main() {
    return "abs";
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(return), Value(String)
            )
        )
    )
)
