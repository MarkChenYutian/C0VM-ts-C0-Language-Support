# if...

int main() {
    if (true) {
        return 0;
    }
    return 1;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(Boolean), Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
            Expression(
                Keyword(return), Value(Number)
            )
        )
    )
)

# if...else...

int main() {
    if (true) {
        return 0;
    } else {
        return 1;
    }
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(Boolean), Scope(
                    Expression(Keyword(return), Value(Number))
                ),
                Keyword(else), Scope(
                    Expression(Keyword(return), Value(Number))
                )
            )
        )
    )
)

# if...else if...else...

int main() {
    if (a) {
        return 0;
    } else if (b) {
        return 1;
    } else {
        return 2;
    }
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Variable(Identifier), Scope(
                    Expression(Keyword(return), Value(Number))
                ),
            
                Keyword(else), Keyword(if), Variable(Identifier), Scope(
                    Expression(Keyword(return), Value(Number))
                ),

                Keyword(else), Scope(
                    Expression(Keyword(return), Value(Number))
                )
            )
        )
    )
)

# multiple else if branch

int main() {
    if (a) {
        return 0;
    } else if (b) {
        return 1;
    } else if (c) {
        return 2;
    } else {
        return 3;
    }
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Variable(Identifier), Scope(
                    Expression(Keyword(return), Value(Number))
                ),
            
                Keyword(else), Keyword(if), Variable(Identifier), Scope(
                    Expression(Keyword(return), Value(Number))
                ),

                Keyword(else), Keyword(if), Variable(Identifier), Scope(
                    Expression(Keyword(return), Value(Number))
                ),

                Keyword(else), Scope(
                    Expression(Keyword(return), Value(Number))
                )
            )
        )
    )
)


# conditions

int main() {
    if (func()) {
        return 0;
    }
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(Variable(Identifier), CommaSep())
                ,
                Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
        )
    )
)

# logical and &&

int main() {
    if (a && b) {
        return 0;
    }
    return 1;
}

==> 

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(
                    Variable(Identifier), LogAnd, Variable(Identifier)
                ),
                Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
            Expression(Keyword(return), Value(Number))
        )
    )
)

# logical or ||

int main() {
    if (a || b) {
        return 0;
    }
    return 1;
}

==> 

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(
                    Variable(Identifier), LogOr, Variable(Identifier)
                ),
                Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
            Expression(Keyword(return), Value(Number))
        )
    )
)

# Not equal !=

int main() {
    if (some_cond_func(a) != 0) {
        return 0;
    }
    return 1;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(
                    Value(Variable(Identifier), CommaSep(Variable(Identifier))),
                    LogNeq,
                    Value(Number)
                ),
                Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
            Expression(Keyword(return), Value(Number))
        )
    )
)

# Logical Not

int main() {
    if (!var) {
        return 0;
    }
    return 1;
}

==>

Program(
    Function(
        Type(Identifier), FunctionName, CommaSep(),
        Scope(
            Expression(
                Keyword(if), Value(LogNot, Variable(Identifier)),
                Scope(
                    Expression(Keyword(return), Value(Number))
                )
            ),
            Expression(Keyword(return), Value(Number))
        )
    )
)
