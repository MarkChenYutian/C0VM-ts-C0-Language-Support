@top Program { Function* }

@skip { space | Comment | CommentBlock }

@precedence { deref @left, arridx @left }       // prefer deref more than arridx when parsing

Function {
    Type Identifier "(" CommaSep<Parameter> ")" 
    (Contract<"requires"> | Contract<"ensures">)*
    Scope
}

Parameter { Type Identifier }

Scope { "{" Line* "}" }

Line {
    (Expression ";")
    | Contract<"assert">
}



Expression {
    Value                                 // Direct value (say calling a function)
    // | DecalareVar                         // Variable Declaration
    | Identifier "=" Value                // Assignment
    | Keyword<"return"> Value             // Return 
}

DecalareVar { 
    (Type Identifier)                     // Plain declaration
    | (Type Identifier "=" Value)         // Declaration with Initial Value
}

Value {
    String | Number | Boolean | Char            // Literal values
    | Identifier ("(" CommaSep<Value> ")")?     // Function Call
    | !deref "*" Value                          // Value can be deref
    | !arridx Value ArrayIndex                  // Can get array index of value
}

ArrayIndex { "[" Value "]" }

Boolean { @specialize<Identifier, "true" | "false"> }

/* Template Rules */
Contract<type> {
    ("//@" Keyword<type> Value ";")
    | ("/*@" Keyword<type> Value ";" "@*/")
}
CommaSep<Content> { "" | Content ("," Content)* }               // Comma seperated values
Keyword<word> { @specialize[@name={word}]<Identifier, word> }   // Keyword


/* Tokens */
@tokens {
    Type { "struct "? $[a-zA-Z_]$[a-zA-Z_0-9]*$[\*\[\]]* }
    Identifier { $[a-zA-Z_]$[a-zA-Z_0-9]* }

    String { '"' $[.]* '"'}
    Number {
             "0" | ($[1-9] $[0-9]*) |           // Normal 10-base number
             (("0x"|"0X") $[0-9a-fA-F]+)        // Hex number
           }
    Char   { "'" $[\\]? $[.] "'"}

    Comment      { "//" ![@] ![\n]* }
    CommentBlock { "/*" ![@] $[.]* "*/"}

    "//@"
    "/*@" "@*/"

    @precedence { "//@", Comment }              // Contract override comment even both match
    @precedence { "/*@", CommentBlock }         // Contract block overrides Comment block

    space { $[ \t\n\r]+ }

    ","
    "*"
    "="
    "[" "]"
    "(" ")"
    "{" "}"
    ";"
}
