@top Program {
  (Function | FuncDeclaration)*
}

@skip {space | Comment | CommentBlock}

@precedence {
  type      @right, deref     @right,
  lognot    @right, bitnot    @right, iadd      @right, imin      @right,
  mul       @left,  div       @left,  mod       @left,
  add       @left,  min       @left, 
  lsh       @left,  rsh       @left, 
  lt        @left,  le        @left,  gt        @left, ge        @left,
  ieq       @left,  neq       @left, 
  bitand    @left,  bitxor    @left,  bitor     @left,
  logand    @left,  logor     @left,  condval   @right,
  addeq     @right, mineq     @right, muleq     @right, diveq     @right, modeq     @right, andeq     @right, xoreq     @right, noteq     @right, lsheq     @right, rsheq     @right
}

FuncDeclaration {
  Type FunctionName "(" CommaSep<Parameter> ")"
  (Contract<"requires"> | Contract<"ensures">)*
  ";"
}

Function {
  Type FunctionName "(" CommaSep<Parameter> ")" 
  (Contract<"requires"> | Contract<"ensures">)*
  Scope
}

Scope { "{" Expression* "}" }

Expression {
  (Type? Variable "=" (Value | Variable) ";")
  | (Type Variable ";")

  | (Variable "+=" (Value | Variable) ";")
  | (Variable "-=" (Value | Variable) ";")
  | (Variable "*=" (Value | Variable) ";")
  | (Variable "/=" (Value | Variable) ";")
  | (Variable "%=" (Value | Variable) ";")
  | (Variable "&=" (Value | Variable) ";")
  | (Variable "^=" (Value | Variable) ";")
  | (Variable "~=" (Value | Variable) ";")
  | (Variable "<<=" (Value | Variable) ";")
  | (Variable ">>=" (Value | Variable) ";")

  | (Keyword<"return"> (Variable | Value) ";")
  | (Keyword<"if"> "(" (Variable | Value) ")" Scope
      (Keyword<"else"> Keyword<"if"> "(" (Variable | Value) ")" Scope)*
      (Keyword<"else"> Scope)?
    )
}

Value {
  String | Number | Boolean | Char | Keyword<"NULL">
  | (Variable "(" CommaSep<Variable | Value> ")")
  | (!lognot "!" (Value | Variable))
  | (!bitnot "~" (Value | Variable))
  | (!iadd "++"  (Value | Variable))
  | (!imin "--"  (Value | Variable))

  | ((Value | Variable) !mul "*" (Value | Variable))
  | ((Value | Variable) !div "/" (Value | Variable))
  | ((Value | Variable) !mod "%" (Value | Variable))

  | ((Value | Variable) !add "+" (Value | Variable))
  | ((Value | Variable) !min "-" (Value | Variable))

  | ((Value | Variable) !lsh "<<" (Value | Variable))
  | ((Value | Variable) !rsh ">>" (Value | Variable))

  | ((Value | Variable) !lt "<" (Value | Variable))
  | ((Value | Variable) !le "<="(Value | Variable))
  | ((Value | Variable) !gt ">" (Value | Variable))
  | ((Value | Variable) !ge ">="(Value | Variable))

  | ((Value | Variable) !ieq "==" (Value | Variable))
  | ((Value | Variable) !neq "!=" (Value | Variable))

  | ((Value | Variable) !bitand "&" (Value | Variable))
  | ((Value | Variable) !bitxor "^" (Value | Variable))
  | ((Value | Variable) !bitor  "|" (Value | Variable))
  
  | ((Value | Variable) !logand "&&" (Value | Variable))
  | ((Value | Variable) !logor  "||" (Value | Variable))
  | ((Value | Variable) !condval "?" (Value | Variable) ":" (Value | Variable))
}

Variable {
  !deref "*"* Identifier (ArrayIndex | ("->" Identifier))*
}

/* Base Definitions */
Type { !type Keyword<"struct">? Identifier ("[" | "]" | "*")* }
Parameter { Type Identifier }
ArrayIndex { "[" (Variable | Value) "]"}
Boolean { @specialize<Identifier, "true"> | @specialize<Identifier, "false"> }

/* Template Rules */
Contract<type> {
  (ContractLine Keyword<type> (Variable | Value) ";")
  | (ContractBlock Keyword<type> (Variable | Value) ";" ContractBlock)
}
CommaSep<Content> { "" | Content ("," Content)* }               // Comma seperated values
Keyword<word> { @specialize[@name={word}]<Identifier, word> }   // Keyword


/* Tokens */
@tokens {
    Identifier { $[a-zA-Z_]$[a-zA-Z_0-9]* }
    FunctionName { $[a-zA-Z_]$[a-zA-Z_0-9]* }

    String { "\"" ![\0]* "\""}
    Number {
             "0" | ($[1-9] $[0-9]*) |           // Normal 10-base number
             (("0x"|"0X") $[0-9a-fA-F]+)        // Hex number
           }
    Char { "'" $[\\]? ![\0] "'"}

    Comment { "//" ![@] ![\n]* }
    CommentBlock { "/*" ![@] ![\0]* "*/"}

    ContractLine {"//@"}
    ContractBlock {"/*@" | "@*/"}

    @precedence { ContractLine, ContractBlock, Comment, CommentBlock, "/" }

    space { $[ \t\n\r]+ }

    ","
    "+=" "-=" "*=" "/=" "%="
    "++" "--"
    "*" "+" "-" "/" "%"
    "~" "^" "|" "<<" ">>"
    "&&" "||" "==" "!=" "<=" ">=" "<" ">" "!"
    "->"
    "="
    "[" "]"
    "(" ")"
    "{" "}"
    ";"
}
