@top Program {
  LibraryImport*
  
  (TypeDefinition 
    | StructDefinition
    | Function
    | FuncDeclaration)*
}

@skip {space | Comment | CommentBlock}

@precedence {
  type      @right, deref     @right,
  lognot    @right, bitnot    @right, iadd      @right, imin      @right,
  mul       @left,  div       @left,  mod       @left,
  add       @left,  min       @left, 
  lsh       @left,  rsh       @left, 
  lt        @left,  le        @left,  gt        @left, ge        @left,
  ieq       @left,  neq       @left, 
  bitand    @left,  bitxor    @left,  bitor     @left,
  logand    @left,  logor     @left,  condval   @right
}

LibraryImport {
  Import "<" LibraryName ">"
}

TypeDefinition {
  Keyword<"typedef"> Type Type ";"
}

StructDefinition {
  Type StructScope ";"
}

FuncDeclaration {
  Type FunctionName "(" CommaSep<Parameter> ")"
  (Contract<"requires"> | Contract<"ensures">)*
  ";"
}

Function {
  Type FunctionName "(" CommaSep<Parameter> ")" 
  (Contract<"requires"> | Contract<"ensures">)*
  Scope
}

Scope { "{" Expression* "}" }
StructScope { "{" (Type Identifier ";")+ "}" }

Expression {
  (Type? !type Variable "=" (Value | Variable) ";"?)
  | (Type Variable ";")

  | Value ";"?

  | (Variable AddEq (Value | Variable) ";"?)
  | (Variable MinEq (Value | Variable) ";"?)
  | (Variable MulEq (Value | Variable) ";"?)
  | (Variable DivEq (Value | Variable) ";"?)
  | (Variable ModEq (Value | Variable) ";"?)
  | (Variable AndEq (Value | Variable) ";"?)
  | (Variable XorEq (Value | Variable) ";"?)
  | (Variable NegEq (Value | Variable) ";"?)
  | (Variable LshEq (Value | Variable) ";"?)
  | (Variable RshEq (Value | Variable) ";"?)
  | ((Value | Variable) !iadd Incr ";"?)
  | ((Value | Variable) !imin Decr ";"?)

  | Contract<"assert">

  | (Keyword<"if"> "(" (Variable | Value) ")" Scope
      (Keyword<"else"> Keyword<"if"> "(" (Variable | Value) ")" Scope)*
      (Keyword<"else"> Scope)?
    )
  | (Keyword<"for"> "(" Expression (Variable | Value) ";" Expression ")"
      Contract<"loop_invariant">*
      Scope
    )
  | (Keyword<"while"> "(" (Variable | Value) ")"
      Contract<"loop_invariant">*
      Scope
    )

  | (Keyword<"return"> (Variable | Value) ";")
}

Value {
  String | Number | Boolean | Char | Keyword<"NULL">
  | (Variable "(" CommaSep<(Variable | Value)> ")")
  
  | (Keyword<"alloc"> "(" Type ")")
  | (Keyword<"alloc_array"> "(" Type "," Value ")")

  | (!lognot LogNot (Value | Variable))
  | (!bitnot BitNot (Value | Variable))

  | ((Value | Variable) !mul Mul (Value | Variable))
  | ((Value | Variable) !div Div (Value | Variable))
  | ((Value | Variable) !mod Mod (Value | Variable))

  | ((Value | Variable) !add Add (Value | Variable))
  | ((Value | Variable) !min Min (Value | Variable))

  | ((Value | Variable) !lsh Lsh (Value | Variable))
  | ((Value | Variable) !rsh Rsh (Value | Variable))

  | ((Value | Variable) !lt Lt (Value | Variable))
  | ((Value | Variable) !le Le (Value | Variable))
  | ((Value | Variable) !gt Gt (Value | Variable))
  | ((Value | Variable) !ge Ge (Value | Variable))

  | ((Value | Variable) !ieq LogEq    (Value | Variable))
  | ((Value | Variable) !neq LogNeq   (Value | Variable))

  | ((Value | Variable) !bitand BitAnd (Value | Variable))
  | ((Value | Variable) !bitxor BitXor (Value | Variable))
  | ((Value | Variable) !bitor  BitOr  (Value | Variable))
  
  | ((Value | Variable) !logand LogAnd (Value | Variable))
  | ((Value | Variable) !logor  LogOr  (Value | Variable))
  | ((Value | Variable) !condval CondQ (Value | Variable) CondS (Value | Variable))
}

Variable {
  !deref Mul* Identifier (ArrayIndex | (Field Identifier))*
} 

/* Base Definitions */
Type { !type Keyword<"struct">? Identifier ("[" | "]" | Mul)* }
Parameter { Type Identifier }
ArrayIndex { "[" (Variable | Value) "]"}
Boolean { @specialize<Identifier, "true"> | @specialize<Identifier, "false"> }

/* Template Rules */
Contract<type> {
  (ContractLine Keyword<type> (Variable | Value) ";")
  | (ContractBlock Keyword<type> (Variable | Value) ";" ContractBlock)
}
CommaSep<Content> { "" | Content ("," Content)* }               // Comma seperated values
Keyword<word> { @specialize[@name={word}]<Identifier, word> }   // Keyword


/* Tokens */
@tokens {
    Identifier { $[a-zA-Z_]$[a-zA-Z_0-9]* }
    LibraryName { $[a-zA-Z_]$[a-zA-Z_0-9]* }
    FunctionName { $[a-zA-Z_]$[a-zA-Z_0-9]* }

    String { '"' ![\"]* '"'}
    Number {
             "0" | ($[1-9] $[0-9]*) |           // Normal 10-base number
             (("0x"|"0X") $[0-9a-fA-F]+)        // Hex number
           }
    Char { "'" $[\\]? ![\0] "'"}

    Comment { "//" ![@] ![\n]* }
    CommentBlock { "/*" ![@] ![/]* "*/"}

    ContractLine {"//@"}
    ContractBlock {"/*@" | "@*/"}

    @precedence { ContractLine, ContractBlock, Comment, CommentBlock, Div }

    space { $[ \t\n\r]+ }

    ","
    AddEq {"+="}
    MinEq {"-="}
    MulEq {"*="}
    DivEq {"/="}
    ModEq {"%="}
    AndEq {"&="}
    XorEq {"^="}
    NegEq {"~="}
    LshEq {"<<="}
    RshEq {">>="}
    Incr  {"++"}
    Decr  {"--"}
    Mul   {"*"}
    Add   {"+"}
    Min   {"-"}
    Div   {"/"}
    Mod   {"%"}
    BitNot{"~"}
    BitXor{"^"}
    BitOr {"|"}
    BitAnd{"&"}
    Lsh   {"<<"}
    Rsh   {">>"}
    LogAnd{"&&"}
    LogOr {"||"}
    LogEq {"=="}
    LogNeq{"!="}
    Le    {"<="}
    Ge    {">="}
    Lt    {"<"}
    Gt    {">"}
    LogNot{"!"}
    CondQ {"?"}
    CondS {":"}
    Field {"->"}
    Import{"#use"}
    "="
    "[" "]"
    "(" ")"
    "{" "}"
    ";"
}

@detectDelim

